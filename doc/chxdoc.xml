<haxe>
	<class path="neko.Lib" params="" file="/usr/lib/haxe/std/neko/Lib.hx">
		<load public="1" set="method" line="29" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Load and return a Neko primitive from a NDLL library.</haxe_doc>
		</load>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Array" params="T" file="/usr/lib/haxe/std/neko/_std/Array.hx">
		<new1 params="T" set="method" line="32" static="1"><f a="a:l">
	<c path="neko.NativeArray"><c path="new1.T"/></c>
	<x path="Int"/>
	<c path="Array"><c path="new1.T"/></c>
</f></new1>
		<__a><c path="neko.NativeArray"><c path="Array.T"/></c></__a>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method" line="39">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<copy public="1" set="method" line="50">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method" line="54">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<insert public="1" set="method" line="69">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<join public="1" set="method" line="82">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<toString public="1" set="method" line="94">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use Std.string() to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<pop public="1" set="method" line="107">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method" line="116">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<unshift public="1" set="method" line="123">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<remove public="1" set="method" line="131">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method" line="148">
			<f a="x:?fromIndex" v=":null">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurense of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="165">
			<f a="x:?fromIndex" v=":null">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurense of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<reverse public="1" set="method" line="182">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method" line="196">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method" line="209">
			<f a="pos:?end" v=":null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end	of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` exceeds or equals `pos`,
		the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method" line="226">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.sort.MergeSort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method" line="249">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<map public="1" params="S" set="method" line="272">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method" line="279">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<__get set="method" line="290"><f a="pos">
	<x path="Int"/>
	<c path="Array.T"/>
</f></__get>
		<__set set="method" line="294"><f a="pos:v">
	<x path="Int"/>
	<c path="Array.T"/>
	<c path="Array.T"/>
</f></__set>
		<__grow set="method" line="315"><f a="l">
	<x path="Int"/>
	<x path="Void"/>
</f></__grow>
		<__neko set="method" line="330"><f a=""><c path="neko.NativeArray"><c path="Array.T"/></c></f></__neko>
		<new public="1" set="method" line="27">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/usr/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.
	
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="EReg" params="" file="/usr/lib/haxe/std/neko/_std/EReg.hx">
		<regexp_new_options line="200" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<unknown/>
</f></regexp_new_options>
		<regexp_match line="201" static="1"><f a=":::">
	<d/>
	<unknown/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></regexp_match>
		<r><d/></r>
		<last><c path="String"/></last>
		<global><x path="Bool"/></global>
		<match public="1" set="method" line="36">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.
		
		This method modifies the internal state.
		
		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<new public="1" set="method" line="28">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.
		
		This is equivalent to the shorthand syntax `~/r/opt`
		
		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc>The EReg class represents regular expressions.
	
	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.
	
	EReg instances can be created by calling the constructor, or with the
	special syntax ~/pattern/modifier
	
	EReg instances maintain an internal state, which is affected by several of
	its methods.
	
	A detailed explanation of the supported operations is available at
	http://haxe.org/doc/cross/regexp</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.
	
	The corresponding enum instance type is `EnumValue`.
	
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="List" params="T" file="/usr/lib/haxe/std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="49">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.
		
		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.
		
		`this.length` increases by 1.</haxe_doc>
		</push>
		<iterator public="1" set="method" line="161">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<new public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole array content every time.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="Map" params="K:V" file="/usr/lib/haxe/std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="Map.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="Map.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="Map.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="Map.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.
		
	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.
	
	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.
	
	Maps can also be created with `key1 => value1, key2 => value2` syntax.
	
	Map is an abstract type, it is not available at runtime.]]></haxe_doc>
		<meta><m n=":multiType"><e>K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="/usr/lib/haxe/std/Map.hx" private="1" module="Map"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="IMap" params="K:V" file="/usr/lib/haxe/std/Map.hx" module="Map" interface="1"><meta><m n=":keep"/></meta></class>
	<typedef path="_Map.Hashable" params="" file="/usr/lib/haxe/std/Map.hx" private="1" module="Map"><a><hashCode set="method"><f a=""><x path="Int"/></f></hashCode></a></typedef>
	<class path="Math" params="" file="/usr/lib/haxe/std/neko/_std/Math.hx">
		<PI public="1" set="null" static="1"><x path="Float"/></PI>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with NaN as an operand will result in NaN.

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.

		In order to test if a value is NaN, you should use Math.isNaN() function.

		(Php) In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with NaN on Windows, see:
			https://bugs.php.net/bug.php?id=42143</haxe_doc>
		</NaN>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with POSITIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. For detailed information,
		see ...

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with NEGATIVE_INFINITY as an operand may result in
		Operations with NEGATIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. For detailed information,
		see ...

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<min public="1" set="method" line="31" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are NaN, the result is NaN.

		If `a` or `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.

		If `a` and `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.</haxe_doc>
		</min>
		<floor public="1" set="method" line="43" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest Int value that is not greater than `v`.

		If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.

		TODO: need spec</haxe_doc>
		</floor>
		<ceil public="1" set="method" line="44" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest Int value that is not less than `v`.

		If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.

		TODO: need spec</haxe_doc>
		</ceil>
		<__rnd static="1"><unknown/></__rnd>
		<_rand_float line="55" static="1"><f a="">
	<unknown/>
	<x path="Float"/>
</f></_rand_float>
		<random public="1" set="method" line="58" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<class path="Reflect" params="" file="/usr/lib/haxe/std/neko/_std/Reflect.hx">
		<callMethod public="1" set="method" line="49" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="61" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.
		
		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.
		
		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="81" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.
		
		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<haxe_doc>The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Int" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard Int type. Its precision depends on the platform.
	
	On static targets, null cannot be assigned to Int. If this is necessary,
	`Null<Int>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard Float type, this is a double-precision IEEE 64bit float.
	
	On static targets, null cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be true or false.
	
	On static targets, null cannot be assigned to Bool. If this is necessary,
	`Null<Bool>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>Dynamic is a special type which is compatible with all other types.
	
	Use of Dynamic should be minimized as it prevents several compiler
	checks and optimizations.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="neko.Boot" params="" file="/usr/lib/haxe/std/neko/Boot.hx">
		<__tmp_str set="method" line="27" static="1"><f a=""><c path="String"/></f></__tmp_str>
		<__enum_str set="method" line="31" static="1"><f a="e">
	<d/>
	<c path="String"/>
</f></__enum_str>
		<__interfLoop set="method" line="53" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<x path="Bool"/>
</f></__interfLoop>
		<__instanceof set="method" line="69" static="1">
			<f a="o:cl">
				<a>
					<__name__ set="null"><unknown/></__name__>
					<__enum__ set="null"><t path="Abstract<Dynamic>"/></__enum__>
					<__ename__ set="null"><unknown/></__ename__>
					<__class__ set="null"><unknown/></__class__>
				</a>
				<t path="Abstract<Dynamic>"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ifFeature"><e>"typed_catch"</e></m></meta>
		</__instanceof>
		<__serialize set="method" line="87" static="1"><f a="o">
	<a>
		<__enum__ set="null"><a><__ename__ set="null"><a><length set="null"><x path="Int"/></length></a></__ename__></a></__enum__>
		<__class__ set="null"><a><__name__ set="null"><a><length set="null"><x path="Int"/></length></a></__name__></a></__class__>
	</a>
	<c path="Array"><unknown/></c>
</f></__serialize>
		<__tagserialize set="method" line="107" static="1"><f a="o">
	<a>
		<tag set="null"><unknown/></tag>
		<__enum__ set="null"><a><__ename__ set="null"><a><length set="null"><x path="Int"/></length></a></__ename__></a></__enum__>
	</a>
	<c path="Array"><unknown/></c>
</f></__tagserialize>
		<__unserialize set="method" line="116" static="1"><f a="v">
	<c path="Array"><unknown/></c>
	<unknown/>
</f></__unserialize>
		<__init set="method" line="139" static="1"><f a=""><x path="Void"/></f></__init>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Std" params="" file="/usr/lib/haxe/std/neko/_std/Std.hx">
		<is public="1" set="method" line="25" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ifFeature"><e>"typed_cast"</e></m></meta>
			<haxe_doc>Tells if a value v is of the type t. Returns false if v or t are null.</haxe_doc>
		</is>
		<string public="1" set="method" line="33" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="37" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</int>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard Void type. Only `null` values can be of the type `Void`.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<typedef path="Null" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accepts or can return a `null` value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<typedef path="Iterator" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the Iterator and advances to the next one.
		
		This method is not required to check hasNext() first. A call to this
		method while hasNext() is false yields unspecified behavior.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns false if the iteration is complete, true otherwise.
		
		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to next(). However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

	Any class with matching hasNext and next fields is considered an Iterator
	and can then be used e.g. in for-loops. This makes it easy to implement
	custom iterators.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See `Lambda` for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="String" params="" file="/usr/lib/haxe/std/neko/_std/String.hx">
		<__is_String static="1"><x path="Bool"/></__is_String>
		<__split line="25" static="1"><d/></__split>
		<fromCharCode public="1" set="method" line="200" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.
		
		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<charAt public="1" set="method" line="42">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.
		
		If `index` is negative or exceeds `this.length`, the empty String ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method" line="54">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.
		
		If `index` is negative or exceeds `this.length`, null is returned.
		
		To obtain the character code of a single character, "x".code can be used
		instead to inline the character code at compile time. Note that this
		only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method" line="60">
			<f a="str:?startIndex" v=":null">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.
		
		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.
		
		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="69">
			<f a="str:?startIndex" v=":null">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.
		
		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.
		
		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method" line="84">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.
		
		If `this` String is the empty String "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.
		
		If `delimiter` is the empty String "", `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.
		
		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.
		
		If `delimiter` is null, the result is unspecified.
		
		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty String "" element.
		Two subsequent delimiters also result in an empty String "" element.</haxe_doc>
		</split>
		<substr public="1" set="method" line="100">
			<f a="pos:?len" v=":null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.
		
		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.
		
		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.
		
		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.
		
		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method" line="126">
			<f a="startIndex:?endIndex" v=":null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to `endIndex`.
		
		If `startIndex` or `endIndex` are negative, 0 is used instead.
		
		If `startIndex` exceeds `endIndex`, they are swapped.
		
		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.
		
		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String "" is returned.</haxe_doc>
		</substring>
		<toLowerCase public="1" set="method" line="150">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.
		
		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<toUpperCase public="1" set="method" line="166">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.
		
		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toString public="1" set="method" line="182">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<__compare set="method" line="188"><f a="o">
	<c path="String"/>
	<x path="Int"/>
</f></__compare>
		<__add set="method" line="192"><f a="s">
	<d/>
	<c path="String"/>
</f></__add>
		<__radd set="method" line="196"><f a="s">
	<d/>
	<c path="String"/>
</f></__radd>
		<new public="1" set="method" line="33">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.
	
	A haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.
	
	Strings can be constructed using the string literal syntax "string value".
	
	String can be concatenated by using the + operator. If an operand is not a
	String, it is passed through Std.string() first.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<class path="StringBuf" params="" file="/usr/lib/haxe/std/neko/_std/StringBuf.hx">
		<__make line="52" static="1"><d/></__make>
		<__add line="53" static="1"><d/></__add>
		<__add_char line="54" static="1"><d/></__add_char>
		<__to_string line="56" static="1"><d/></__to_string>
		<b><d/></b>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.
		
		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.
	
	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.
	
	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="StringTools" params="" file="/usr/lib/haxe/std/StringTools.hx">
		<startsWith public="1" set="method" line="127" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is null, the result is unspecified.

		If `start` is the empty String "", the result is true.</haxe_doc>
		</startsWith>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	'using StringTools' and then acts as an extension to the String class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Type" params="" file="/usr/lib/haxe/std/neko/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="36" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.
		
		If `o` is null or of a different type, null is returned.
		
		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getClassName public="1" set="method" line="57" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.
		
		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a haxe module, that module is not part of the
		package structure.
			
		If `c` has no package, the class name is returned.
		
		If `c` is null, the result is unspecified.
		
		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<resolveClass public="1" set="method" line="69" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.
		
		If `name` is the path of an existing class, that class is returned.
		
		Otherwise null is returned.
		
		If `name` is null or the path to a different type, the result is
		unspecified.
		
		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<getInstanceFields public="1" set="method" line="135" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`.
		
		This only includes fields which are known at compile-time. In
		particular, using getInstanceFields(getClass(obj)) will not include
		any fields which were added to obj at runtime.
		
		The order of the fields in the returned Array is unspecified.
		
		If `c` is null, the result is unspecified.
		
		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.
	
	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="com.artemisx.Aspect" params="" file="./src/com/artemisx/Aspect.hx">
		<getAspectForAll public="1" get="inline" set="null" line="68" static="1"><f a="types">
	<t path="Iterable"><x path="Class"><c path="com.artemisx.Component"/></x></t>
	<c path="com.artemisx.Aspect"/>
</f></getAspectForAll>
		<getAspectForOne public="1" get="inline" set="null" line="75" static="1"><f a="types">
	<t path="Iterable"><x path="Class"><c path="com.artemisx.Component"/></x></t>
	<c path="com.artemisx.Aspect"/>
</f></getAspectForOne>
		<getAspectFromBits public="1" get="inline" set="null" line="82" static="1"><f a="bits">
	<c path="com.artemisx.utils.Bitset"/>
	<c path="com.artemisx.Aspect"/>
</f></getAspectFromBits>
		<matches public="1" set="method" line="89" static="1"><f a="signature:componentBits">
	<c path="com.artemisx.Aspect"/>
	<c path="com.artemisx.utils.Bitset"/>
	<x path="Bool"/>
</f></matches>
		<fufills public="1" set="method" line="132" static="1"><f a="aspect:fufiller">
	<c path="com.artemisx.Aspect"/>
	<c path="com.artemisx.Aspect"/>
	<x path="Bool"/>
</f></fufills>
		<getEmpty public="1" get="inline" set="null" line="175" static="1"><f a=""><c path="com.artemisx.Aspect"/></f></getEmpty>
		<allSet get="accessor" set="null">
			<c path="com.artemisx.utils.Bitset"/>
			<meta><m n=":isVar"/></meta>
		</allSet>
		<exclusionSet get="accessor" set="null">
			<c path="com.artemisx.utils.Bitset"/>
			<meta><m n=":isVar"/></meta>
		</exclusionSet>
		<oneSet get="accessor" set="null">
			<c path="com.artemisx.utils.Bitset"/>
			<meta><m n=":isVar"/></meta>
		</oneSet>
		<get_allSet get="inline" set="null" line="34"><f a=""><c path="com.artemisx.utils.Bitset"/></f></get_allSet>
		<get_exclusionSet get="inline" set="null" line="35"><f a=""><c path="com.artemisx.utils.Bitset"/></f></get_exclusionSet>
		<get_oneSet get="inline" set="null" line="36"><f a=""><c path="com.artemisx.utils.Bitset"/></f></get_oneSet>
		<all public="1" set="method" line="38"><f a="types">
	<t path="Iterable"><x path="Class"><c path="com.artemisx.Component"/></x></t>
	<c path="com.artemisx.Aspect"/>
</f></all>
		<exclude public="1" set="method" line="48"><f a="types">
	<t path="Iterable"><x path="Class"><c path="com.artemisx.Component"/></x></t>
	<c path="com.artemisx.Aspect"/>
</f></exclude>
		<one public="1" set="method" line="58"><f a="types">
	<t path="Iterable"><x path="Class"><c path="com.artemisx.Component"/></x></t>
	<c path="com.artemisx.Aspect"/>
</f></one>
		<equals public="1" set="method" line="171"><f a="v">
	<c path="com.artemisx.Aspect"/>
	<x path="Bool"/>
</f></equals>
		<new set="method" line="27"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* Used by Systems to match against groups of entities.
 * This may be conceptually difficult to understand, so read
 * Ari's comments about it here:
 *
 *    http://gamadu.com/artemisx/manual.html#Aspect
 *    http://gamadu.com/artemisx/javadoc/com/artemis/Aspect.html
 *
 * originally written by Arni Arent
 * ported to HaXe by Team Yu</haxe_doc>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.Component" params="" file="./src/com/artemisx/Component.hx" interface="1"/>
	<class path="com.artemisx.EntityObserver" params="" file="./src/com/artemisx/EntityObserver.hx" interface="1">
		<onAdded public="1" set="method"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onAdded>
		<onChanged public="1" set="method"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onChanged>
		<onDeleted public="1" set="method"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDeleted>
		<onEnabled public="1" set="method"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onEnabled>
		<onDisabled public="1" set="method"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDisabled>
		<haxe_doc>*
 * The EntityObserver interface. Used for subscribing/listening to entity events
 *  originally written by Arni Arent
 *  ported to HaXe by Team Yu
 *</haxe_doc>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.Manager" params="" file="./src/com/artemisx/Manager.hx">
		<implements path="com.artemisx.EntityObserver"/>
		<world>
			<c path="com.artemisx.World"/>
			<meta><m n=":isVar"/></meta>
		</world>
		<initialize set="method" line="16"><f a=""><x path="Void"/></f></initialize>
		<onAdded public="1" set="method" line="18"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onAdded>
		<onChanged public="1" set="method" line="20"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onChanged>
		<onDeleted public="1" set="method" line="22"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDeleted>
		<onDisabled public="1" set="method" line="24"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDisabled>
		<onEnabled public="1" set="method" line="26"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onEnabled>
		<haxe_doc>*
 * The Manager class.
 *  originally written by Arni Arent
 *  ported to HaXe by Team Yu
 *</haxe_doc>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.ComponentManager" params="" file="./src/com/artemisx/ComponentManager.hx">
		<extends path="com.artemisx.Manager"/>
		<componentsByType><c path="com.artemisx.utils.Bag"><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Component"/></c></c></componentsByType>
		<deletedEntities><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c></deletedEntities>
		<initialize set="method" line="24" override="1"><f a=""><x path="Void"/></f></initialize>
		<removeComponentsOfEntity get="inline" set="null" line="26"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></removeComponentsOfEntity>
		<addComponent get="inline" set="null" line="38"><f a="e:type:component">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.ComponentType"/>
	<c path="com.artemisx.Component"/>
	<x path="Void"/>
</f></addComponent>
		<removeComponent get="inline" set="null" line="52"><f a="e:type">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.ComponentType"/>
	<x path="Void"/>
</f></removeComponent>
		<getComponentsByType get="inline" set="null" line="60"><f a="type">
	<c path="com.artemisx.ComponentType"/>
	<c path="com.artemisx.utils.Bag"><c path="com.artemisx.Component"/></c>
</f></getComponentsByType>
		<getComponent get="inline" set="null" line="70"><f a="e:type">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.ComponentType"/>
	<c path="com.artemisx.Component"/>
</f></getComponent>
		<getComponentsFor public="1" get="inline" set="null" line="80"><f a="e">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.utils.Bag"><c path="com.artemisx.Component"/></c>
</f></getComponentsFor>
		<clean set="method" line="94"><f a=""><x path="Void"/></f></clean>
		<onDeleted public="1" set="method" line="104" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDeleted>
		<new public="1" set="method" line="18"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ComponentManager
 * originally written by Arni Arent
 * ported to HaXe by Team Yu</haxe_doc>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.ComponentMapper" params="A" file="./src/com/artemisx/ComponentMapper.hx">
		<getFor public="1" params="T" set="method" line="20" static="1"><f a="type:world">
	<x path="Class"><c path="getFor.T"/></x>
	<c path="com.artemisx.World"/>
	<c path="com.artemisx.ComponentMapper"><c path="getFor.T"/></c>
</f></getFor>
		<type><c path="com.artemisx.ComponentType"/></type>
		<classType><x path="Class"><c path="com.artemisx.ComponentMapper.A"/></x></classType>
		<components><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Component"/></c></components>
		<get public="1" get="inline" set="null" line="32"><f a="e">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.ComponentMapper.A"/>
</f></get>
		<getSafe public="1" get="inline" set="null" line="34"><f a="e">
	<c path="com.artemisx.Entity"/>
	<c path="com.artemisx.ComponentMapper.A"/>
</f></getSafe>
		<has public="1" get="inline" set="null" line="43"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Bool"/>
</f></has>
		<new set="method" line="25"><f a="type:world">
	<x path="Class"><c path="com.artemisx.ComponentMapper.A"/></x>
	<c path="com.artemisx.World"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ComponentMapper
 * originally written by Arni Arent
 * ported to HaXe by Team Yu</haxe_doc>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.utils.ClassHash" params="V" file="./src/com/artemisx/utils/ClassHash.hx">
		<mymap params="A:B" get="inline" set="null" line="56" static="1"><f a="it:f">
	<t path="Iterator"><c path="mymap.A"/></t>
	<f a="">
		<c path="mymap.A"/>
		<c path="mymap.B"/>
	</f>
	<t path="Iterator"><c path="mymap.B"/></t>
</f></mymap>
		<map><c path="haxe.ds.StringMap"><c path="com.artemisx.utils.ClassHash.V"/></c></map>
		<set public="1" get="inline" set="null" line="19"><f a="key:value">
	<x path="Class"><d/></x>
	<c path="com.artemisx.utils.ClassHash.V"/>
	<x path="Void"/>
</f></set>
		<get public="1" get="inline" set="null" line="24"><f a="key">
	<x path="Class"><d/></x>
	<t path="Null"><c path="com.artemisx.utils.ClassHash.V"/></t>
</f></get>
		<exists public="1" get="inline" set="null" line="29"><f a="key">
	<x path="Class"><d/></x>
	<x path="Bool"/>
</f></exists>
		<remove public="1" get="inline" set="null" line="34"><f a="key">
	<x path="Class"><d/></x>
	<x path="Bool"/>
</f></remove>
		<keys public="1" get="inline" set="null" line="39"><f a=""><t path="Iterator"><x path="Class"><d/></x></t></f></keys>
		<iterator public="1" get="inline" set="null" line="45"><f a=""><t path="Iterator"><c path="com.artemisx.utils.ClassHash.V"/></t></f></iterator>
		<toString public="1" get="inline" set="null" line="50"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="14"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="/usr/lib/haxe/std/neko/_std/haxe/ds/StringMap.hx">
		<implements path="IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h><d/></h>
		<keys public="1" set="method" line="48">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="54">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="60">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.
	
	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="com.artemisx.ComponentType" params="" file="./src/com/artemisx/ComponentType.hx">
		<getIndexFor public="1" get="inline" set="null" line="16" static="1"><f a="c">
	<x path="Class"><c path="com.artemisx.Component"/></x>
	<x path="Int"/>
</f></getIndexFor>
		<getTypeFor public="1" get="inline" set="null" line="18" static="1"><f a="c">
	<x path="Class"><c path="com.artemisx.Component"/></x>
	<c path="com.artemisx.ComponentType"/>
</f></getTypeFor>
		<getTypeFromIndex public="1" get="inline" set="null" line="30" static="1"><f a="index">
	<x path="Int"/>
	<x path="Class"><c path="com.artemisx.Component"/></x>
</f></getTypeFromIndex>
		<componentTypes line="57" static="1"><c path="com.artemisx.utils.ClassHash"><c path="com.artemisx.ComponentType"/></c></componentTypes>
		<componentIndicies line="58" static="1"><c path="Array"><c path="com.artemisx.ComponentType"/></c></componentIndicies>
		<INDEX line="59" static="1"><x path="Int"/></INDEX>
		<typeIndexComparator get="inline" set="null" line="63" static="1"><f a="a:b">
	<c path="com.artemisx.ComponentType"/>
	<c path="com.artemisx.ComponentType"/>
	<x path="Int"/>
</f></typeIndexComparator>
		<className set="method" line="83" static="1"><f a="clazz">
	<x path="Class"><c path="com.artemisx.Component"/></x>
	<c path="String"/>
</f></className>
		<index public="1" get="accessor" set="null"><x path="Int"/></index>
		<type><x path="Class"><c path="com.artemisx.Component"/></x></type>
		<get_index public="1" get="inline" set="null" line="79"><f a=""><x path="Int"/></f></get_index>
		<toString public="1" set="method" line="81"><f a=""><c path="String"/></f></toString>
		<new set="method" line="73"><f a="type">
	<x path="Class"><c path="com.artemisx.Component"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ComponentType
 * originally written by Arni Arent
 * ported to HaXe by Team Yu</haxe_doc>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.Entity" params="" file="./src/com/artemisx/Entity.hx">
		<uuid public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</uuid>
		<id public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</id>
		<componentBits public="1" get="accessor" set="null">
			<c path="com.artemisx.utils.Bitset"/>
			<meta><m n=":isVar"/></meta>
		</componentBits>
		<systemBits public="1" get="accessor" set="null">
			<c path="com.artemisx.utils.Bitset"/>
			<meta><m n=":isVar"/></meta>
		</systemBits>
		<world><c path="com.artemisx.World"/></world>
		<entityManager><c path="com.artemisx.EntityManager"/></entityManager>
		<componentManager><c path="com.artemisx.ComponentManager"/></componentManager>
		<reset set="method" line="39"><f a=""><x path="Void"/></f></reset>
		<addComponent public="1" get="inline" set="null" line="45"><f a="component">
	<c path="com.artemisx.Component"/>
	<c path="com.artemisx.Entity"/>
</f></addComponent>
		<addComponentOfType public="1" get="inline" set="null" line="51"><f a="component:type">
	<c path="com.artemisx.Component"/>
	<c path="com.artemisx.ComponentType"/>
	<c path="com.artemisx.Entity"/>
</f></addComponentOfType>
		<removeComponent public="1" get="inline" set="null" line="57"><f a="c">
	<x path="Class"><c path="com.artemisx.Component"/></x>
	<c path="com.artemisx.Entity"/>
</f></removeComponent>
		<removeComponentInstance public="1" get="inline" set="null" line="63"><f a="component">
	<c path="com.artemisx.Component"/>
	<c path="com.artemisx.Entity"/>
</f></removeComponentInstance>
		<removeComponentOfType public="1" get="inline" set="null" line="69"><f a="type">
	<c path="com.artemisx.ComponentType"/>
	<c path="com.artemisx.Entity"/>
</f></removeComponentOfType>
		<listComponents public="1" set="method" line="76"><f a=""><c path="String"/></f></listComponents>
		<toString public="1" set="method" line="102"><f a=""><c path="String"/></f></toString>
		<getWorld public="1" set="method" line="106"><f a=""><c path="com.artemisx.World"/></f></getWorld>
		<getComponentOfType public="1" get="inline" set="null" line="108"><f a="type">
	<c path="com.artemisx.ComponentType"/>
	<c path="com.artemisx.Component"/>
</f></getComponentOfType>
		<getComponent public="1" params="T" get="inline" set="null" line="110"><f a="clazz">
	<x path="Class"><c path="getComponent.T"/></x>
	<c path="getComponent.T"/>
</f></getComponent>
		<getComponents public="1" get="inline" set="null" line="111"><f a=""><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Component"/></c></f></getComponents>
		<isActive public="1" get="inline" set="null" line="113"><f a=""><x path="Bool"/></f></isActive>
		<isEnabled public="1" get="inline" set="null" line="114"><f a=""><x path="Bool"/></f></isEnabled>
		<addToWorld public="1" get="inline" set="null" line="116"><f a=""><x path="Void"/></f></addToWorld>
		<changedInWorld public="1" get="inline" set="null" line="117"><f a=""><x path="Void"/></f></changedInWorld>
		<deleteFromWorld public="1" get="inline" set="null" line="118"><f a=""><x path="Void"/></f></deleteFromWorld>
		<enable public="1" get="inline" set="null" line="120"><f a=""><x path="Void"/></f></enable>
		<disable public="1" get="inline" set="null" line="121"><f a=""><x path="Void"/></f></disable>
		<get_uuid get="inline" set="null" line="123"><f a=""><c path="String"/></f></get_uuid>
		<get_id get="inline" set="null" line="124"><f a=""><x path="Int"/></f></get_id>
		<get_componentBits get="inline" set="null" line="126"><f a=""><c path="com.artemisx.utils.Bitset"/></f></get_componentBits>
		<get_systemBits get="inline" set="null" line="127"><f a=""><c path="com.artemisx.utils.Bitset"/></f></get_systemBits>
		<new set="method" line="27"><f a="world:id">
	<c path="com.artemisx.World"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>*
 *  The entity class.
 *  originally written by Arni Arent
 *  ported to HaXe by Team Yu
 *</haxe_doc>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.EntityManager" params="" file="./src/com/artemisx/EntityManager.hx">
		<extends path="com.artemisx.Manager"/>
		<entities><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c></entities>
		<disabled><c path="com.artemisx.utils.Bitset"/></disabled>
		<activeEntityCount public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</activeEntityCount>
		<totalAdded public="1" get="accessor" set="null">
			<c path="haxe.Int64"/>
			<meta><m n=":isVar"/></meta>
		</totalAdded>
		<totalCreated public="1" get="accessor" set="null">
			<c path="haxe.Int64"/>
			<meta><m n=":isVar"/></meta>
		</totalCreated>
		<totalDeleted public="1" get="accessor" set="null">
			<c path="haxe.Int64"/>
			<meta><m n=":isVar"/></meta>
		</totalDeleted>
		<identifierPool><c path="com.artemisx._EntityManager.IdentifierPool"/></identifierPool>
		<initialize public="1" set="method" line="40" override="1"><f a=""><x path="Void"/></f></initialize>
		<createEntityInstance public="1" get="inline" set="null" line="42"><f a=""><c path="com.artemisx.Entity"/></f></createEntityInstance>
		<onEnabled public="1" get="inline" set="null" line="49" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onEnabled>
		<onDisabled public="1" get="inline" set="null" line="50" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDisabled>
		<onAdded public="1" get="inline" set="null" line="51" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onAdded>
		<onDeleted public="1" get="inline" set="null" line="58" override="1"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDeleted>
		<isActive public="1" get="inline" set="null" line="71"><f a="entityId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isActive>
		<isEnabled public="1" get="inline" set="null" line="75"><f a="entityId">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<get_activeEntityCount public="1" set="method" line="78"><f a=""><x path="Int"/></f></get_activeEntityCount>
		<get_totalCreated public="1" set="method" line="82"><f a=""><c path="haxe.Int64"/></f></get_totalCreated>
		<get_totalAdded public="1" set="method" line="85"><f a=""><c path="haxe.Int64"/></f></get_totalAdded>
		<get_totalDeleted public="1" set="method" line="88"><f a=""><c path="haxe.Int64"/></f></get_totalDeleted>
		<getEntity get="inline" set="null" line="90"><f a="entityId">
	<x path="Int"/>
	<c path="com.artemisx.Entity"/>
</f></getEntity>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>*
 * The EntityManager class.
 *  originally written by Arni Arent
 *  ported to HaXe by Team Yu
 *</haxe_doc>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx._EntityManager.IdentifierPool" params="" file="./src/com/artemisx/EntityManager.hx" private="1" module="com.artemisx.EntityManager">
		<ids><c path="com.artemisx.utils.Bag"><x path="Int"/></c></ids>
		<nextAvailableId><x path="Int"/></nextAvailableId>
		<checkout public="1" get="inline" set="null" line="113"><f a=""><x path="Int"/></f></checkout>
		<checkin public="1" get="inline" set="null" line="124"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></checkin>
		<new public="1" set="method" line="107"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="com.artemisx.EntitySystem" params="" file="./src/com/artemisx/EntitySystem.hx">
		<implements path="com.artemisx.EntityObserver"/>
		<actives public="1" get="accessor" set="null">
			<c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c>
			<meta><m n=":isVar"/></meta>
		</actives>
		<world public="1" get="null" set="accessor">
			<c path="com.artemisx.World"/>
			<meta><m n=":isVar"/></meta>
		</world>
		<passive public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</passive>
		<aspect><c path="com.artemisx.Aspect"/></aspect>
		<dummy><x path="Bool"/></dummy>
		<systemIndex><x path="Int"/></systemIndex>
		<allSet><c path="com.artemisx.utils.Bitset"/></allSet>
		<exclusionSet><c path="com.artemisx.utils.Bitset"/></exclusionSet>
		<oneSet><c path="com.artemisx.utils.Bitset"/></oneSet>
		<process public="1" set="method" line="43"><f a=""><x path="Void"/></f></process>
		<begin set="method" line="52"><f a=""><x path="Void"/></f></begin>
		<end set="method" line="53"><f a=""><x path="Void"/></f></end>
		<initialize set="method" line="54"><f a=""><x path="Void"/></f></initialize>
		<processEntities set="method" line="56"><f a="entities">
	<c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c>
	<x path="Void"/>
</f></processEntities>
		<checkProcessing set="method" line="57"><f a=""><x path="Bool"/></f></checkProcessing>
		<onInserted set="method" line="59"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onInserted>
		<onRemoved set="method" line="60"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onRemoved>
		<check set="method" line="62"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></check>
		<insertToSystem set="method" line="94"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></insertToSystem>
		<removeFromSystem set="method" line="101"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></removeFromSystem>
		<onAdded public="1" set="method" line="108"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onAdded>
		<onChanged public="1" set="method" line="109"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onChanged>
		<onDeleted public="1" set="method" line="110"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDeleted>
		<onEnabled public="1" set="method" line="117"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onEnabled>
		<onDisabled public="1" set="method" line="118"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></onDisabled>
		<isPassive public="1" get="inline" set="null" line="120"><f a=""><x path="Bool"/></f></isPassive>
		<get_passive public="1" get="inline" set="null" line="121"><f a=""><x path="Bool"/></f></get_passive>
		<set_passive public="1" get="inline" set="null" line="122"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_passive>
		<get_actives public="1" get="inline" set="null" line="123"><f a=""><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c></f></get_actives>
		<set_world public="1" get="inline" set="null" line="124"><f a="v">
	<c path="com.artemisx.World"/>
	<c path="com.artemisx.World"/>
</f></set_world>
		<new public="1" set="method" line="32"><f a="aspect">
	<c path="com.artemisx.Aspect"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>*
 * The EntitySystem class.
 *  originally written by Arni Arent
 *  ported to HaXe by Team Yu
 *</haxe_doc>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx._EntitySystem.SystemIndexManager" params="" file="./src/com/artemisx/EntitySystem.hx" private="1" module="com.artemisx.EntitySystem">
		<INDEX line="129" static="1"><x path="Int"/></INDEX>
		<indicies line="130" static="1"><c path="com.artemisx.utils.ClassHash"><x path="Int"/></c></indicies>
		<getIndexFor public="1" params="T" set="method" line="132" static="1"><f a="es">
	<x path="Class"><c path="getIndexFor.T"/></x>
	<x path="Int"/>
</f></getIndexFor>
	</class>
	<class path="com.artemisx.World" params="" file="./src/com/artemisx/World.hx">
		<fAdded line="305" static="1"><f a="observer:e">
	<c path="com.artemisx.EntityObserver"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></fAdded>
		<fChanged line="308" static="1"><f a="observer:e">
	<c path="com.artemisx.EntityObserver"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></fChanged>
		<fDisabled line="311" static="1"><f a="observer:e">
	<c path="com.artemisx.EntityObserver"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></fDisabled>
		<fEnabled line="314" static="1"><f a="observer:e">
	<c path="com.artemisx.EntityObserver"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></fEnabled>
		<fDeleted line="317" static="1"><f a="observer:e">
	<c path="com.artemisx.EntityObserver"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></fDeleted>
		<entityManager public="1" set="null">
			<c path="com.artemisx.EntityManager"/>
			<meta><m n=":isVar"/></meta>
		</entityManager>
		<componentManager public="1" set="null">
			<c path="com.artemisx.ComponentManager"/>
			<meta><m n=":isVar"/></meta>
		</componentManager>
		<delta public="1" get="accessor" set="accessor">
			<t path="Null"><x path="Float"/></t>
			<meta><m n=":isVar"/></meta>
		</delta>
		<initialize public="1" set="method" line="43"><f a=""><x path="Void"/></f></initialize>
		<getEntityManager public="1" get="inline" set="null" line="55"><f a=""><c path="com.artemisx.EntityManager"/></f></getEntityManager>
		<getComponentManager public="1" get="inline" set="null" line="60"><f a=""><c path="com.artemisx.ComponentManager"/></f></getComponentManager>
		<getManager public="1" params="M" get="inline" set="null" line="65"><f a="managerType">
	<x path="Class"><c path="getManager.M"/></x>
	<c path="getManager.M"/>
</f></getManager>
		<getManagerSafe public="1" params="M" set="method" line="70"><f a="managerType">
	<x path="Class"><c path="getManagerSafe.M"/></x>
	<c path="getManagerSafe.M"/>
</f></getManagerSafe>
		<setManager public="1" params="M" get="inline" set="null" line="81"><f a="manager">
	<c path="setManager.M"/>
	<c path="setManager.M"/>
</f></setManager>
		<deleteManager public="1" get="inline" set="null" line="89"><f a="manager">
	<c path="com.artemisx.Manager"/>
	<x path="Void"/>
</f></deleteManager>
		<addEntity public="1" get="inline" set="null" line="95"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></addEntity>
		<deleteEntity public="1" get="inline" set="null" line="100"><f a="e:?flush" v=":false">
	<c path="com.artemisx.Entity"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></deleteEntity>
		<deleteEntities public="1" set="method" line="109"><f a=""><x path="Void"/></f></deleteEntities>
		<enableEntity public="1" get="inline" set="null" line="121"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></enableEntity>
		<changedEntity public="1" get="inline" set="null" line="126"><f a="e:?flush" v=":false">
	<c path="com.artemisx.Entity"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></changedEntity>
		<disableEntity public="1" set="method" line="135"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></disableEntity>
		<containsActiveEntity public="1" get="inline" set="null" line="140"><f a="e">
	<c path="com.artemisx.Entity"/>
	<x path="Bool"/>
</f></containsActiveEntity>
		<createEntity public="1" get="inline" set="null" line="145"><f a=""><c path="com.artemisx.Entity"/></f></createEntity>
		<setSystem public="1" params="T" get="inline" set="null" line="152"><f a="system:?passive" v=":false">
	<c path="setSystem.T"/>
	<x path="Bool"/>
	<c path="setSystem.T"/>
</f></setSystem>
		<deleteSystem public="1" get="inline" set="null" line="161"><f a="system">
	<c path="com.artemisx.EntitySystem"/>
	<x path="Void"/>
</f></deleteSystem>
		<deleteSystemsOfTypes public="1" get="inline" set="null" line="167"><f a="types">
	<c path="Array"><x path="Class"><c path="com.artemisx.EntitySystem"/></x></c>
	<x path="Void"/>
</f></deleteSystemsOfTypes>
		<disableSystemsOfTypes public="1" get="inline" set="null" line="178"><f a="types">
	<c path="Array"><x path="Class"><c path="com.artemisx.EntitySystem"/></x></c>
	<x path="Void"/>
</f></disableSystemsOfTypes>
		<enableSystemsOfTypes public="1" get="inline" set="null" line="188"><f a="types">
	<c path="Array"><x path="Class"><c path="com.artemisx.EntitySystem"/></x></c>
	<x path="Void"/>
</f></enableSystemsOfTypes>
		<getEntity public="1" get="inline" set="null" line="198"><f a="entityId">
	<x path="Int"/>
	<c path="com.artemisx.Entity"/>
</f></getEntity>
		<getMapper public="1" params="T" get="inline" set="null" line="203"><f a="type">
	<x path="Class"><c path="getMapper.T"/></x>
	<c path="com.artemisx.ComponentMapper"><c path="getMapper.T"/></c>
</f></getMapper>
		<getSystem public="1" params="T" get="inline" set="null" line="208"><f a="type">
	<x path="Class"><c path="getSystem.T"/></x>
	<c path="getSystem.T"/>
</f></getSystem>
		<getSystems public="1" get="inline" set="null" line="213"><f a=""><c path="com.artemisx.utils.ImmutableBag"><c path="com.artemisx.EntitySystem"/></c></f></getSystems>
		<getSystemSafe public="1" params="T" get="inline" set="null" line="218"><f a="type">
	<x path="Class"><c path="getSystemSafe.T"/></x>
	<c path="getSystemSafe.T"/>
</f></getSystemSafe>
		<processBatch public="1" get="inline" set="null" line="229"><f a=""><x path="Void"/></f></processBatch>
		<process public="1" set="method" line="239"><f a=""><x path="Void"/></f></process>
		<added><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c></added>
		<changed><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c></changed>
		<deleted><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c></deleted>
		<enable><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c></enable>
		<disable><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c></disable>
		<managers><c path="com.artemisx.utils.ClassHash"><c path="com.artemisx.Manager"/></c></managers>
		<managersBag><c path="com.artemisx.utils.Bag"><c path="com.artemisx.Manager"/></c></managersBag>
		<systems><c path="com.artemisx.utils.ClassHash"><c path="com.artemisx.EntitySystem"/></c></systems>
		<systemsBag><c path="com.artemisx.utils.Bag"><c path="com.artemisx.EntitySystem"/></c></systemsBag>
		<get_delta get="inline" set="null" line="264"><f a=""><x path="Float"/></f></get_delta>
		<set_delta get="inline" set="null" line="269"><f a="delta">
	<x path="Float"/>
	<x path="Float"/>
</f></set_delta>
		<notifySystems get="inline" set="null" line="277"><f a="post:e">
	<f a=":">
		<c path="com.artemisx.EntitySystem"/>
		<c path="com.artemisx.Entity"/>
		<x path="Void"/>
	</f>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></notifySystems>
		<notifyManagers get="inline" set="null" line="284"><f a="post:e">
	<f a=":">
		<c path="com.artemisx.Manager"/>
		<c path="com.artemisx.Entity"/>
		<x path="Void"/>
	</f>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></notifyManagers>
		<check set="method" line="291"><f a="entities:method">
	<c path="com.artemisx.utils.Bag"><c path="com.artemisx.Entity"/></c>
	<f a=":">
		<c path="com.artemisx.EntityObserver"/>
		<c path="com.artemisx.Entity"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></check>
		<new public="1" set="method" line="22"><f a=""><x path="Void"/></f></new>
		<haxe_doc>*
 * The World class.
 *  originally written by Arni Arent
 *  ported to HaXe by Team Yu
 *</haxe_doc>
	</class>
	<class path="com.artemisx._World.ComponentMapperInitHelper" params="" file="./src/com/artemisx/World.hx" private="1" module="com.artemisx.World"><config public="1" set="method" line="328" static="1"><f a="target:world">
	<d/>
	<c path="com.artemisx.World"/>
	<x path="Void"/>
</f></config></class>
	<class path="com.artemisx._World.Performer" params="" file="./src/com/artemisx/World.hx" private="1" module="com.artemisx.World">
		<perform public="1" set="method" line="348"><f a="observer:e">
	<c path="com.artemisx.EntityObserver"/>
	<c path="com.artemisx.Entity"/>
	<x path="Void"/>
</f></perform>
		<new public="1" set="method" line="347"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="com.artemisx.test.ArtemisTest" params="" file="./src/com/artemisx/test/ArtemisTest.hx">
		<main set="method" line="5" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<meta><m n=":access"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.test._TestAspect.ComponentA" params="" file="./src/com/artemisx/test/TestAspect.hx" private="1" module="com.artemisx.test.TestAspect"><implements path="com.artemisx.Component"/></class>
	<class path="com.artemisx.test._TestAspect.ComponentB" params="" file="./src/com/artemisx/test/TestAspect.hx" private="1" module="com.artemisx.test.TestAspect"><implements path="com.artemisx.Component"/></class>
	<class path="haxe.unit.TestCase" params="" file="/usr/lib/haxe/std/haxe/unit/TestCase.hx">
		<currentTest public="1"><c path="haxe.unit.TestStatus"/></currentTest>
		<setup public="1" set="method" line="33"><f a=""><x path="Void"/></f></setup>
		<tearDown public="1" set="method" line="36"><f a=""><x path="Void"/></f></tearDown>
		<print public="1" set="method" line="39"><f a="v">
	<d/>
	<x path="Void"/>
</f></print>
		<assertTrue public="1" set="method" line="43"><f a="b:?c" v=":null">
	<x path="Bool"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></assertTrue>
		<assertFalse public="1" set="method" line="53"><f a="b:?c" v=":null">
	<x path="Bool"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></assertFalse>
		<assertEquals public="1" params="T" set="method" line="63"><f a="expected:actual:?c" v="::null">
	<c path="assertEquals.T"/>
	<c path="assertEquals.T"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></assertEquals>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keepSub"/>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="com.artemisx.test.TestAspect" params="" file="./src/com/artemisx/test/TestAspect.hx">
		<extends path="haxe.unit.TestCase"/>
		<testBasic public="1" set="method" line="14"><f a=""><x path="Void"/></f></testBasic>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<meta><m n=":access"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.test.TestBag" params="" file="./src/com/artemisx/test/TestBag.hx">
		<extends path="haxe.unit.TestCase"/>
		<setup public="1" set="method" line="7" override="1"><f a=""><x path="Void"/></f></setup>
		<testSanity public="1" set="method" line="10"><f a=""><x path="Void"/></f></testSanity>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
		<meta><m n=":access"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.test.TestBitset" params="" file="./src/com/artemisx/test/TestBitset.hx">
		<extends path="haxe.unit.TestCase"/>
		<setup public="1" set="method" line="7" override="1"><f a=""><x path="Void"/></f></setup>
		<testSanity public="1" set="method" line="10"><f a=""><x path="Void"/></f></testSanity>
		<sub_testSetBit public="1" set="method" line="17"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></sub_testSetBit>
		<sub_testUnsetBit public="1" set="method" line="44"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></sub_testUnsetBit>
		<testGeneral public="1" set="method" line="78"><f a=""><x path="Void"/></f></testGeneral>
		<testGeneralStress public="1" set="method" line="87"><f a=""><x path="Void"/></f></testGeneralStress>
		<testNumberOfTrailingZeroes public="1" set="method" line="94"><f a=""><x path="Void"/></f></testNumberOfTrailingZeroes>
		<testIntersection public="1" set="method" line="101"><f a=""><x path="Void"/></f></testIntersection>
		<testIteratorSanity public="1" set="method" line="112"><f a=""><x path="Void"/></f></testIteratorSanity>
		<testNextSetBit public="1" set="method" line="139"><f a=""><x path="Void"/></f></testNextSetBit>
		<testCompactness public="1" set="method" line="167"><f a=""><x path="Void"/></f></testCompactness>
		<testIterator public="1" set="method" line="179"><f a=""><x path="Void"/></f></testIterator>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
		<meta><m n=":access"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.test.TestEntityManager" params="" file="./src/com/artemisx/test/TestEntityManager.hx">
		<extends path="haxe.unit.TestCase"/>
		<mgr public="1"><c path="com.artemisx.EntityManager"/></mgr>
		<testBasic public="1" set="method" line="10"><f a=""><x path="Void"/></f></testBasic>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="com.artemisx.test.TestUUID" params="" file="./src/com/artemisx/test/TestUUID.hx">
		<extends path="haxe.unit.TestCase"/>
		<format public="1"><c path="EReg"/></format>
		<setup public="1" set="method" line="9" override="1"><f a=""><x path="Void"/></f></setup>
		<testPRNG public="1" set="method" line="13"><f a=""><x path="Void"/></f></testPRNG>
		<testFormat public="1" set="method" line="36"><f a=""><x path="Void"/></f></testFormat>
		<testUniqueness public="1" set="method" line="42"><f a=""><x path="Void"/></f></testUniqueness>
		<testUniquenessSomeMore public="1" set="method" line="49"><f a=""><x path="Void"/></f></testUniquenessSomeMore>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
		<meta><m n=":access"><e>'???'</e></m></meta>
	</class>
	<class path="com.artemisx.test.ComponentA" params="" file="./src/com/artemisx/test/TestWorld.hx" module="com.artemisx.test.TestWorld"><implements path="com.artemisx.Component"/></class>
	<class path="com.artemisx.test.ComponentB" params="" file="./src/com/artemisx/test/TestWorld.hx" module="com.artemisx.test.TestWorld"><implements path="com.artemisx.Component"/></class>
	<class path="com.artemisx.test._TestWorld.DummySystemA" params="" file="./src/com/artemisx/test/TestWorld.hx" private="1" module="com.artemisx.test.TestWorld">
		<extends path="com.artemisx.EntitySystem"/>
		<compA public="1">
			<c path="com.artemisx.ComponentMapper"><c path="com.artemisx.test.ComponentA"/></c>
			<meta><m n="Mapper"><e>"com.artemisx.test.ComponentA"</e></m></meta>
		</compA>
		<new public="1" set="method" line="18"><f a="aspect">
	<c path="com.artemisx.Aspect"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.artemisx.test._TestWorld.DummySystemB" params="" file="./src/com/artemisx/test/TestWorld.hx" private="1" module="com.artemisx.test.TestWorld">
		<extends path="com.artemisx.EntitySystem"/>
		<new public="1" set="method" line="22"><f a="aspect">
	<c path="com.artemisx.Aspect"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.artemisx.test.TestWorld" params="" file="./src/com/artemisx/test/TestWorld.hx">
		<extends path="haxe.unit.TestCase"/>
		<testSystem public="1" set="method" line="25"><f a=""><x path="Void"/></f></testSystem>
		<new public="1" set="method" line="24"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="com.artemisx.utils.ImmutableBag" params="E" file="./src/com/artemisx/utils/ImmutableBag.hx" interface="1">
		<size public="1" set="null"><x path="Int"/></size>
		<get public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="com.artemisx.utils.ImmutableBag.E"/>
</f></get>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<contains public="1" set="method"><f a="e">
	<c path="com.artemisx.utils.ImmutableBag.E"/>
	<x path="Bool"/>
</f></contains>
	</class>
	<class path="com.artemisx.utils.Bag" params="E" file="./src/com/artemisx/utils/Bag.hx">
		<implements path="com.artemisx.utils.ImmutableBag"><c path="com.artemisx.utils.Bag.E"/></implements>
		<data><t path="com.artemisx.utils.TArray"><c path="com.artemisx.utils.Bag.E"/></t></data>
		<size public="1" set="null"><x path="Int"/></size>
		<removeAt public="1" get="inline" set="null" line="24"><f a="index">
	<x path="Int"/>
	<c path="com.artemisx.utils.Bag.E"/>
</f></removeAt>
		<remove public="1" get="inline" set="null" line="34"><f a="e">
	<c path="com.artemisx.utils.Bag.E"/>
	<c path="com.artemisx.utils.Bag.E"/>
</f></remove>
		<removeLast public="1" set="method" line="51"><f a=""><c path="com.artemisx.utils.Bag.E"/></f></removeLast>
		<contains public="1" get="inline" set="null" line="61"><f a="e">
	<c path="com.artemisx.utils.Bag.E"/>
	<x path="Bool"/>
</f></contains>
		<removeAllIn public="1" get="inline" set="null" line="73"><f a="bag">
	<c path="com.artemisx.utils.ImmutableBag"><c path="com.artemisx.utils.Bag.E"/></c>
	<x path="Bool"/>
</f></removeAllIn>
		<get public="1" get="inline" set="null" line="94"><f a="index">
	<x path="Int"/>
	<c path="com.artemisx.utils.Bag.E"/>
</f></get>
		<getCapacity public="1" get="inline" set="null" line="96"><f a=""><x path="Int"/></f></getCapacity>
		<isIndexWithinBounds public="1" get="inline" set="null" line="98"><f a="index">
	<x path="Int"/>
	<x path="Bool"/>
</f></isIndexWithinBounds>
		<isEmpty public="1" get="inline" set="null" line="100"><f a=""><x path="Bool"/></f></isEmpty>
		<add public="1" set="method" line="103"><f a="e">
	<c path="com.artemisx.utils.Bag.E"/>
	<x path="Void"/>
</f></add>
		<set public="1" get="inline" set="null" line="111"><f a="index:e">
	<x path="Int"/>
	<c path="com.artemisx.utils.Bag.E"/>
	<x path="Void"/>
</f></set>
		<grow get="inline" set="null" line="120"><f a="newCapactiy">
	<x path="Int"/>
	<x path="Void"/>
</f></grow>
		<ensureCapacity public="1" get="inline" set="null" line="128"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></ensureCapacity>
		<clear public="1" get="inline" set="null" line="135"><f a=""><x path="Void"/></f></clear>
		<addAllin public="1" get="inline" set="null" line="143"><f a="items">
	<c path="com.artemisx.utils.ImmutableBag"><c path="com.artemisx.utils.Bag.E"/></c>
	<x path="Void"/>
</f></addAllin>
		<toString public="1" set="method" line="150"><f a=""><x path="Void"/></f></toString>
		<new public="1" set="method" line="13"><f a="?capacity" v="64">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* Maybe one day there will be something faster and this class would allow us to
 * switch to a faster data struct without modifying any other code</haxe_doc>
	</class>
	<typedef path="com.artemisx.utils.INT_TYPE" params="" file="./src/com/artemisx/utils/Bitset.hx" module="com.artemisx.utils.Bitset"><x path="Int"/></typedef>
	<class path="com.artemisx.utils.Bitset" params="" file="./src/com/artemisx/utils/Bitset.hx">
		<ADDRESS_BITS_PER_WORD get="inline" set="null" line="9" static="1"><x path="Int"/></ADDRESS_BITS_PER_WORD>
		<BITS_PER_WORD get="inline" set="null" line="10" static="1"><x path="Int"/></BITS_PER_WORD>
		<BIT_INDEX_MASK get="inline" set="null" line="11" static="1"><x path="Int"/></BIT_INDEX_MASK>
		<WORD_MASK get="inline" set="null" line="13" static="1"><x path="Int"/></WORD_MASK>
		<numberOfTrailingZeros public="1" get="inline" set="null" line="159" static="1"><f a="i">
	<x path="Int"/>
	<x path="Int"/>
</f></numberOfTrailingZeros>
		<bits><t path="com.artemisx.utils.TArray"><x path="Int"/></t></bits>
		<wordsInUse public="1" set="null"><x path="Int"/></wordsInUse>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<copy public="1" set="method" line="25"><f a=""><c path="com.artemisx.utils.Bitset"/></f></copy>
		<ensureCapacity public="1" get="inline" set="null" line="32"><f a="bitIndex">
	<x path="Int"/>
	<x path="Void"/>
</f></ensureCapacity>
		<intersects public="1" get="inline" set="null" line="44"><f a="set">
	<c path="com.artemisx.utils.Bitset"/>
	<x path="Bool"/>
</f></intersects>
		<nextClearBit public="1" get="inline" set="null" line="54"><f a="fromIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></nextClearBit>
		<nextSetBit public="1" set="method" line="70"><f a="fromIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></nextSetBit>
		<get public="1" get="inline" set="null" line="86"><f a="bitIndex">
	<x path="Int"/>
	<x path="Bool"/>
</f></get>
		<set public="1" get="inline" set="null" line="95"><f a="bitIndex">
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<unset public="1" get="inline" set="null" line="100"><f a="bitIndex">
	<x path="Int"/>
	<x path="Void"/>
</f></unset>
		<clear public="1" set="method" line="106"><f a=""><x path="Void"/></f></clear>
		<isEmpty public="1" set="method" line="114"><f a=""><x path="Bool"/></f></isEmpty>
		<get_length public="1" set="method" line="123"><f a=""><x path="Int"/></f></get_length>
		<recalulateWordsInUse set="method" line="127"><f a=""><x path="Void"/></f></recalulateWordsInUse>
		<equals public="1" set="method" line="139"><f a="v">
	<c path="com.artemisx.utils.Bitset"/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="155"><f a=""><c path="String"/></f></toString>
		<iter public="1" set="method" line="171"><f a=""><t path="Iterator"><x path="Int"/></t></f></iter>
		<new public="1" set="method" line="19"><f a="?numBits" v="1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="com.artemisx.utils.TArray" params="T" file="./src/com/artemisx/utils/TArray.hx"><c path="Array"><c path="com.artemisx.utils.TArray.T"/></c></typedef>
	<class path="com.artemisx.utils.UUID" params="" file="./src/com/artemisx/utils/UUID.hx">
		<M31 get="inline" set="null" line="40" static="1"><x path="Float"/></M31>
		<MINSTD get="inline" set="null" line="41" static="1"><x path="Float"/></MINSTD>
		<next get="inline" set="null" line="44" static="1"><f a="seed">
	<x path="Int"/>
	<x path="Int"/>
</f></next>
		<getUuid public="1" set="method" line="48" static="1"><f a="?seed" v="null">
	<x path="Int"/>
	<c path="String"/>
</f></getUuid>
	</class>
	<enum path="haxe.StackItem" params="" file="/usr/lib/haxe/std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line">
			<t path="Null"><e path="haxe.StackItem"/></t>
			<c path="String"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<LocalFunction a="v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<class path="haxe.CallStack" params="" file="/usr/lib/haxe/std/haxe/CallStack.hx">
		<exceptionStack public="1" set="method" line="94" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="128" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<itemToString set="method" line="137" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<makeStack set="method" line="164" static="1"><f a="s">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></makeStack>
		<haxe_doc>Get informations about the call stack.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.EnumTools" params="" file="/usr/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.
		
		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.
			
		If `e` has no package, the enum name is returned.
		
		If `e` is null, the result is unspecified.
		
		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="e:constr:?params" v="::null">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.
		
		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="e:index:?params" v="::null">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.
		
		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.
		
		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.
		
		This may return the empty Array [] if all constructors of `e` require
		arguments.
		
		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.
		
		The order of the constructor names in the returned Array is preserved
		from the original syntax.
		
		If `c` is null, the result is unspecified.</haxe_doc>
		</getConstructors>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.
		
		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.
		
		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="125" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.
		
		The result String does not contain any constructor arguments.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="139" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.
		
		If `e` has no arguments, the result is [].
		
		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="151" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.
		
		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</getIndex>
	</class>
	<class path="haxe.Int64" params="" file="/usr/lib/haxe/std/haxe/Int64.hx">
		<add public="1" set="method" line="125" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></add>
		<uicompare set="method" line="251" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></uicompare>
		<high><x path="Int"/></high>
		<low><x path="Int"/></low>
		<new get="inline" set="null" line="29"><f a="high:low">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.Log" params="" file="/usr/lib/haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="45" static="1">
			<f a="v:?infos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the trace() call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v,infos) { // handle trace }
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to trace() will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the trace() method, which is invoked upon a call to
	trace() in haxe code.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/usr/lib/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<c path="Array"><d/></c>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.
	
	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.
	
	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/usr/lib/haxe/std/haxe/ds/HashMap.hx">
		<this><a>
	<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
	<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
</a></this>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.io.BytesData" params="" file="/usr/lib/haxe/std/haxe/io/BytesData.hx"><c path="neko.NativeString"/></typedef>
	<class path="haxe.rtti.Meta" params="" file="/usr/lib/haxe/std/haxe/rtti/Meta.hx">
		<getFields public="1" set="method" line="56" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class fields or enum constructors</haxe_doc>
		</getFields>
		<haxe_doc>An api to access classes and enums metadata at runtime.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.unit.TestResult" params="" file="/usr/lib/haxe/std/haxe/unit/TestResult.hx">
		<m_tests><c path="List"><c path="haxe.unit.TestStatus"/></c></m_tests>
		<success public="1" set="null"><x path="Bool"/></success>
		<add public="1" set="method" line="34"><f a="t">
	<c path="haxe.unit.TestStatus"/>
	<x path="Void"/>
</f></add>
		<toString public="1" set="method" line="40"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.unit.TestRunner" params="" file="/usr/lib/haxe/std/haxe/unit/TestRunner.hx">
		<print public="1" set="dynamic" line="35" static="1"><f a="v">
	<d/>
	<x path="Void"/>
</f></print>
		<customTrace set="method" line="91" static="1"><f a="v:?p" v=":null">
	<unknown/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></customTrace>
		<result public="1" set="null"><c path="haxe.unit.TestResult"/></result>
		<cases><c path="List"><c path="haxe.unit.TestCase"/></c></cases>
		<add public="1" set="method" line="100"><f a="c">
	<c path="haxe.unit.TestCase"/>
	<x path="Void"/>
</f></add>
		<run public="1" set="method" line="104"><f a=""><x path="Bool"/></f></run>
		<runCase set="method" line="113"><f a="t">
	<c path="haxe.unit.TestCase"/>
	<x path="Void"/>
</f></runCase>
		<new public="1" set="method" line="95"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.unit.TestStatus" params="" file="/usr/lib/haxe/std/haxe/unit/TestStatus.hx">
		<done public="1"><x path="Bool"/></done>
		<success public="1"><x path="Bool"/></success>
		<error public="1"><c path="String"/></error>
		<method public="1"><c path="String"/></method>
		<classname public="1"><c path="String"/></classname>
		<posInfos public="1"><t path="haxe.PosInfos"/></posInfos>
		<backtrace public="1"><c path="String"/></backtrace>
		<new public="1" set="method" line="36"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="neko.NativeArray" params="T" file="/usr/lib/haxe/std/neko/NativeArray.hx"><meta><m n=":keep"/></meta></class>
</haxe>